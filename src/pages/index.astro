---
import DiscordPresence from '@/components/bento/DiscordPresence.tsx'
import GithubCalendar from '@/components/bento/GithubCalendar.tsx'
import Container from '@/components/Container.astro'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import Analytics from '@vercel/analytics/astro'
---

<Layout title="Home" description={SITE.DESCRIPTION}>
  <!-- Main container holding all content -->
  <Container class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">

    <!-- Spacer (this adds the space between the topbar and the content) -->
    <div class="col-span-full h-16 bg-[var(--muted)] dark:bg-[var(--secondary)]"></div>

    <!-- Discord Presence Section -->
    <div class="w-full h-full min-h-[200px] max-w-sm mx-auto rounded-xl border bg-background">
      <div class="p-4 h-full">
        <section class="h-full">
          <div class="relative overflow-hidden h-full">
            <DiscordPresence client:load />
          </div>
        </section>
      </div>
    </div>

    <!-- Github Calendar Section -->
    <div class="w-full h-full min-h-[200px] max-w-sm mx-auto rounded-xl border bg-background">
      <div class="p-4 h-full">
        <section class="h-full">
          <div class="has-overlay relative flex h-full items-center justify-center overflow-hidden hover:bg-none">
            <GithubCalendar username="Omarplayz233" client:load />
          </div>
        </section>
      </div>
    </div>

    <!-- Three.js Visualization Section -->
    <div class="w-full h-[400px] max-w-sm mx-auto rounded-xl border bg-background overflow-hidden">
      <div style={{ position: "relative", width: "100%", height: "100%" }}>
        <div
          id="demo"
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            overflow: "hidden",
          }}
        ></div>
      </div>
    </div>

    <Analytics/>
  </Container>

  <script type="module" defer>
    import * as THREE from "https://unpkg.com/three/build/three.module.js";

    const container = document.getElementById("demo");
    const width = container.offsetWidth;
    const height = container.offsetHeight;
    const fg = 0xf5e6d4;

    const scene = new THREE.Scene();
    const camera = new THREE.OrthographicCamera(0, width, 0, height, 1, 2);
    camera.position.z = 2;

    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setClearColor(0, 0);
    renderer.setSize(width, height);
    renderer.setPixelRatio(window.devicePixelRatio);

    const clock = new THREE.Clock();

    const geometry = new THREE.PlaneGeometry(width, height);
    geometry.translate(width / 2, height / 2, 0);

    const vs = `
      void main() {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `;

    // Improved fragment shader with proper noise function
    const fs = `
      uniform vec3 color;
      uniform float time;

      float snoise(vec3 v) {
        vec3 i = floor(v + 0.5);
        vec3 f = v - i;
        float a = dot(i, vec3(1.0, 57.0, 113.0));
        return sin(a);
      }

      void main() {
        float levels = 12.0;

        float noise = snoise(vec3(gl_FragCoord.xy * 0.003 , time * 0.012));
        noise = (noise + 1.0) / 2.0;

        float lower = floor(noise * levels) / levels;
        float lowerDiff = noise - lower;

        if (lowerDiff > 0.005)
          discard;

        gl_FragColor = vec4(color, 1.0);
      }
    `;

    const material = new THREE.ShaderMaterial({
      uniforms: {
        color: { value: new THREE.Color(fg) },
        time: { value: 0 },
      },
      vertexShader: vs,
      fragmentShader: fs,
      side: THREE.BackSide,
    });
    scene.add(new THREE.Mesh(geometry, material));

    container.appendChild(renderer.domElement);

    function frame() {
      requestAnimationFrame(frame);
      material.uniforms.time.value = clock.startTime + clock.getElapsedTime();
      renderer.render(scene, camera);
    }
    frame();
  </script>
</Layout>
