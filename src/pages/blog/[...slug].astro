---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { formatDate, parseAuthors, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { type CollectionEntry, getCollection } from 'astro:content'
import Analytics from '@vercel/analytics/astro'

export async function getStaticPaths() {
  const posts = (await getCollection('blog'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }))
}
type Props = CollectionEntry<'blog'>

const posts = (await getCollection('blog'))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

function getPostIndex(slug: string): number {
  return posts.findIndex((post) => post.slug === slug)
}

function getPrevPost(slug: string): Props | null {
  const postIndex = getPostIndex(slug)
  return postIndex !== -1 && postIndex < posts.length - 1
    ? posts[postIndex + 1]
    : null
}

function getNextPost(slug: string): Props | null {
  const postIndex = getPostIndex(slug)
  return postIndex > 0 ? posts[postIndex - 1] : null
}

const currentPostSlug = Astro.params.slug
const nextPost = getNextPost(currentPostSlug)
const prevPost = getPrevPost(currentPostSlug)

const post = Astro.props
const { Content, headings } = await post.render()

const authors = await parseAuthors(post.data.authors ?? [])
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image?.src ?? '/static/1200x630.png'}
>
  <div class="fixed top-0 left-0 right-0 h-24 bg-[var(--muted)] dark:bg-[var(--secondary)] z-10" />
  <Analytics />
  <main class="relative pt-24">
    <div class="mx-auto max-w-[768px] px-4">
      <Breadcrumbs
        items={[
          { href: '/blog', label: 'Blog', icon: 'lucide:archive' },
          { label: post.data.title, icon: 'lucide:file-text' },
        ]}
        class="mb-6"
      />
      
      {post.data.image && (
        <div class="mb-6">
          <Image
            src={post.data.image}
            alt={post.data.title}
            width={1200}
            height={630}
            class="w-full object-cover"
          />
        </div>
      )}
      
      <div class="flex flex-col gap-y-6 text-center mb-6">
        <div class="flex flex-col gap-y-4">
          <h1 class="text-4xl font-bold leading-tight sm:text-5xl">
            {post.data.title}
          </h1>

          <div class="flex flex-wrap items-center justify-center gap-2 text-sm text-muted-foreground">
            {authors.length > 0 && (
              <>
                <div class="flex items-center gap-x-2">
                  {authors.map((author) => (
                    <div class="flex items-center gap-x-1.5">
                      <Image
                        src={author.avatar}
                        alt={author.name}
                        width={24}
                        height={24}
                        class="rounded-full"
                      />
                      {author.isRegistered ? (
                        <Link
                          href={`/authors/${author.slug}`}
                          underline
                          class="text-foreground"
                        >
                          <span>{author.name}</span>
                        </Link>
                      ) : (
                        <span>{author.name}</span>
                      )}
                    </div>
                  ))}
                </div>
                <Separator orientation="vertical" className="h-4" />
              </>
            )}
            <div class="flex items-center gap-2">
              <span>{formatDate(post.data.date)}</span>
              <Separator orientation="vertical" className="h-4" />
              <span>{readingTime(post.body)}</span>
            </div>
          </div>

          <div class="flex flex-wrap justify-center gap-2">
            {post.data.tags && post.data.tags.length > 0 ? (
              post.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag}`}
                  class={badgeVariants({ variant: 'secondary' })}
                >
                  <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
                  {tag}
                </a>
              ))
            ) : (
              <span class="text-sm text-muted-foreground">
                No tags available
              </span>
            )}
          </div>
        </div>
      </div>

      {headings.length > 0 && (
        <div class="mb-6">
          <TableOfContents headings={headings} />
        </div>
      )}

      <article class="prose prose-neutral max-w-none dark:prose-invert mb-6">
        <Content />
      </article>

      <div class="mb-6">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
    </div>
  </main>
  <div class="fixed bottom-0 left-0 right-0 h-24 bg-[var(--muted)] dark:bg-[var(--secondary)] z-10" />
</Layout>
